% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/add_formatted_worksheet.R
\name{add_formatted_worksheet}
\alias{add_formatted_worksheet}
\title{Add excel sheet with a formatted header}
\usage{
add_formatted_worksheet(
  data,
  workbook,
  sheet,
  wrapHeadlineText = FALSE,
  collabels = TRUE,
  colwidths = TRUE,
  standards = NULL,
  dbsource = deparse(substitute(data)),
  FUN = NULL,
  ...
)
}
\arguments{
\item{data}{[\code{data.frame}]\cr
The data to export to the Excel sheet.}

\item{workbook}{[\code{work book object}]\cr
The workbook object used to create the Excel workbook.}

\item{sheet}{[\code{character(1)}]\cr
The Excel sheet name.}

\item{wrapHeadlineText}{[\code{logical(1)}]\cr
Should headline allow wrapping of text. Defaults to \code{FALSE}.}

\item{collabels}{[\code{logical(1)}]\cr
Should headline be changed to standard labels. Defaults to \code{TRUE}.}

\item{colwidths}{[\code{logical(1)}] or \code{"auto"}\cr
Should defined standard column widths be used. Defaults to \code{TRUE}.}

\item{standards}{[\code{data.frame}]\cr
Tables with column_standards. Defaults to \code{NULL}.}

\item{dbsource}{[\code{character(1)}]\cr
Database source of data in column standards table. Defaults to name
of input data.}

\item{FUN}{[\code{function}]\cr
Function for additional formatting of the worksheet. Either
predefined functions in this package or self made. Defaults to
\code{NULL}.}

\item{\dots}{Other arguments to be passed to \code{FUN}.}
}
\value{
None. A new sheet with formatted headline is added to the workbook object.
}
\description{
Add excel sheet with a header formatted with bold font, column
    labels and column width. The function is a wrapper for
    \ifelse{html}{\code{\link[openxlsx:addWorksheet]{openxlsx::addWorksheet}}}{\code{openxlsx::addWorksheet}}
    and are using
    \ifelse{html}{\code{\link[NVIdb:standardize_columns]{NVIdb::standardize_columns}}}{\code{NVIdb::standardize_columns}}
    to standardize columns.
}
\details{
Add excel sheet with a formatted header. The header will be formatted
    with bold text.

    \code{collabels = TRUE} the column names are translated to column labels
    in accord with the column standards table, see
    \ifelse{html}{\code{\link[NVIdb:standardize_columns]{NVIdb::standardize_columns}}}{\code{NVIdb::standardize_columns}}.

    \code{colwidths = TRUE} the column widths are given in accord with the
    column standards table, see
    \ifelse{html}{\code{\link[NVIdb:standardize_columns]{NVIdb::standardize_columns}}}{\code{NVIdb::standardize_columns}}.

    \code{colwidths = "auto"} the column widths are given automatic column
    width. This is not recommend for large tables.

    \code{wrapHeadlineText = TRUE} the headline text is allowed to wrap on
    two or more lines. The parameter should be chosen in accord with what looks
    nice depending on column labels and column widths.

    \code{standards} is the name of the table with column standards. If no
    parameter is given, the columns_standards.csv is used. Column names are
    translated to column labels in accord with the column standards table,
    see \code{standardize_columns}.

    \code{dbsource} is the dbsource in the column standards table making it
    possible to tailer the column labels and column widths per table.
}
\examples{
\dontrun{
# Attach packages and set up with temporary directory
td <- tempdir()
library(NVIpretty)
library(openxlsx)


# Generate Excel-sheet
workbook <- createWorkbook()

# Add a sheet to the workbook
add_formatted_worksheet(iris,
                        workbook,
                        sheet = "iris",
                        wrapHeadlineText = TRUE,
                        collabels = TRUE,
                        colwidths = FALSE,
                        standards = NULL)

# Save the workbook
saveWorkbook(wb = workbook,
             file = paste0(td, "/iris.xlsx"),
                          overwrite = TRUE)

print(paste("One may examine the Excel workbook at", normalizepath(td, )))
}

}
\author{
Petter Hopp Petter.Hopp@vetinst.no
}
